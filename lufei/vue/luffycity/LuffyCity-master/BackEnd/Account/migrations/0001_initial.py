# Generated by Django 3.0.3 on 2020-05-09 05:00

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
        ('Course', '0008_practicalcourse_isbuy'),
    ]

    operations = [
        migrations.CreateModel(
            name='Classes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('QQ', models.IntegerField(verbose_name='班级QQ群')),
                ('startDate', models.DateField(verbose_name='开课日期')),
                ('graduateDate', models.DateField(blank=True, null=True, verbose_name='结业日期')),
                ('explain', models.TextField(blank=True, null=True, verbose_name='说明')),
                ('classTeacher', models.ForeignKey(help_text='班主任为成员管理部成员，负责督促老师课程制作进度和学生学习进度', on_delete=django.db.models.deletion.PROTECT, to='Course.Teacher', verbose_name='班主任')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='Course.PracticalCourse', verbose_name='课程')),
            ],
        ),
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('avatar', models.ImageField(default='avatars/default.png', upload_to='avatars/')),
                ('telephone', models.CharField(blank=True, max_length=11, null=True, unique=True)),
                ('balance', models.IntegerField(default=0, verbose_name='贝里余额')),
                ('identity', models.SmallIntegerField(choices=[(0, '学员'), (1, '导师'), (2, '管理员')], default=1)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chapters', models.CharField(max_length=64, verbose_name='模块章节')),
                ('title', models.CharField(max_length=32, verbose_name='题目')),
                ('file', models.FileField(upload_to='media/task/', verbose_name='作业内容')),
                ('date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='提交时间')),
                ('achievement', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(1)], verbose_name='成绩')),
                ('comment', models.TextField(blank=True, null=True, verbose_name='老师点评')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='学生')),
                ('teacher', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='Course.Teacher', verbose_name='批改老师')),
            ],
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('QQ', models.CharField(max_length=32, verbose_name='学生QQ')),
                ('telephone', models.CharField(max_length=32, verbose_name='学生手机号')),
                ('state', models.IntegerField(choices=[(1, '审核'), (2, '在读'), (3, '毕业')], default=1, verbose_name='学生状态')),
                ('remark', models.TextField(blank=True, null=True, verbose_name='备注')),
                ('classList', models.ManyToManyField(blank=True, to='Account.Classes', verbose_name='已报班级')),
                ('student', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='学生信息')),
            ],
        ),
    ]
